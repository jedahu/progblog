<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jed at work</title>
    <link>https://jedahu.github.io/post/</link>
    <description>Recent content in Posts on Jed at work</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jedahu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My kingdom for a build system</title>
      <link>https://jedahu.github.io/post/2016-01-26-my-kingdom-for-a-build-system/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jedahu.github.io/post/2016-01-26-my-kingdom-for-a-build-system/</guid>
      <description>

&lt;p&gt;The DNX based projects I&amp;rsquo;ve created all use a simple Powershell script for
building. It is only 44 lines long with a function for each build phase.&lt;/p&gt;

&lt;p&gt;The script amounts to a thin wrapper over dnx and dnu commands which applies
them to (potentially) more than one project. The script requires a conventional
project layout.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s simple.&lt;/p&gt;

&lt;p&gt;It works.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t like it.&lt;/p&gt;

&lt;h2 id=&#34;powershell-is-painful:53348488d876da08896ae022bd21aff7&#34;&gt;Powershell is painful&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Return semantics.&lt;/strong&gt; Powershell functions return everything as an ordered
collection piped to stdout and smudge the difference between values and
single-value collections.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;function InterestingReturnSemantics() {
    1
    &amp;quot;two&amp;quot;
    @{buckle = &amp;quot;My Shoe&amp;quot;}
}
  
# =&amp;gt; [1, &amp;quot;two&amp;quot;, @{buckle = &amp;quot;My Shoe&amp;quot;}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Types.&lt;/strong&gt; Type annotations are permitted, but operate as locations for
type-coercion rather than type-safety.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Versions.&lt;/strong&gt; Scripts written for v5 may not work on v4 and below, but I can&amp;rsquo;t
test that because parallel installation is not supported.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Powershell is imprecise and unsafe. I&amp;rsquo;m uncomfortable using it long term for a
non-throwaway task. Here be dragons and dynamic-typing.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-script-is-not-a-real-build-system:53348488d876da08896ae022bd21aff7&#34;&gt;The script is not a real build system&lt;/h2&gt;

&lt;p&gt;IMO the basics of a build system are:
1. transitive dependency between phases
2. determinism and therefore repeatability
3. change detection so phases are not triggered unnecessarily&lt;/p&gt;

&lt;p&gt;The script does none of these. Dependency is trivial, but without change
detection it results in phase repetition. In fact, dependency without the
determinism or change detection is simply a bunch of functions calling each
other.&lt;/p&gt;

&lt;h2 id=&#34;net-build-systems-don-t-cut-the-mustard:53348488d876da08896ae022bd21aff7&#34;&gt;.NET build systems don&amp;rsquo;t cut the mustard&lt;/h2&gt;

&lt;p&gt;Bau (C#), Cake (C#), and Fake (F#) have some nice bells and whistles like
automatic import of required NuGet packages and plenty of plugins, but they only
provide #1.&lt;/p&gt;

&lt;p&gt;I rewrote the build script with Cake but reverted to Powershell because of a
&lt;a href=&#34;https://github.com/tflite/TakeFlite.Storage/commit/f5d1b7ed5f82eb2cafab2336b1579ff7e788eb29&#34;&gt;Powershell integration problem&lt;/a&gt; and because the experience was not pleasant.
Cake does some strange things with global scope and its plugin system is simply
bizarre.&lt;/p&gt;

&lt;h2 id=&#34;system-status:53348488d876da08896ae022bd21aff7&#34;&gt;System status&lt;/h2&gt;

&lt;p&gt;For now I have reverted back to using a Powershell script because it works and
is still small enough to be easily comprehended and fixed as necessary.&lt;/p&gt;

&lt;p&gt;WRT the future I have begun work on a csi / scriptcs based tool that will
provide the basics. I&amp;rsquo;m also investigating how easy it would be to add change
detection to one of the existing tools.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dear tools, walk then run.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>